# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
vagrantfile_api_version = "2"

def provision_to_tmp(node, files_to_provision)
  files_to_provision.each do |source|
    filename = File.basename(source)
    node.vm.provision "file", source: source, destination: "/tmp/#{filename}"
  end
end

Vagrant.configure(vagrantfile_api_version) do |config|
  config.vm.provider :libvirt do |libvirt|
    # libvirt.host = "localhost"
    # libvirt.username = "root"
    # libvirt.password = "linux"
    # libvirt.connect_via_ssh = true
    # libvirt.storage_pool_name = "default"
  end

  config.vm.define :admin, :primary => true do |admin|
    admin.vm.box = "suse/cloud4-admin"
    admin.vm.box_check_update = false

    # The override parameter lets us configure global config parameters
    # per provider.
    #
    # See the 'OVERRIDING CONFIGURATION' section of
    # http://docs.vagrantup.com/v2/providers/configuration.html and
    # https://github.com/mitchellh/vagrant/issues/1867 for a full
    # explanation.
    admin.vm.provider "virtualbox" do |provider, override|
      provider.memory = 2048
      provider.cpus = 1

      # Don't use headless mode
      provider.gui = true

      # Use AMD instead of Intel NICs to avoid VLAN problems
      provider.customize [ 'modifyvm', :id, '--nictype1', 'Am79C973' ]
      provider.customize [ 'modifyvm', :id, '--nictype2', 'Am79C973' ]

      # Setup network for admin node and for Crowbar in general.
      # Vagrant's VirtualBox provider requires the first interface of
      # every VM to be NAT:
      #
      #   https://docs.vagrantup.com/v2/virtualbox/boxes.html
      #
      # which with VirtualBox means it can't communicate with the other
      # VMs.  And for an HA setup we need two interfaces which are
      # teamed and able to communicate with other VMs.  On VirtualBox
      # this means making them host-only.
      override.vm.network "private_network", ip: "192.168.124.10", auto_config: false
    end

    admin.vm.provider "libvirt" do |provider, override|
      provider.memory = 2048
      provider.cpus = 1

      provider.volume_cache = "none"

      # Don't use headless mode
      provider.gui = true

      # The vagrant-libvirt provider requires a private management network:
      #
      #   https://github.com/pradels/vagrant-libvirt
      #
      # This defaults to 192.168.121.0/24 but that's a bit too close to
      # conventional OpenStack networks for comfort.
      provider.management_network_address = "192.168.101.0/24"
      provider.management_network_name = "vagrant-mgmt"

      override.vm.network "private_network",
        ip: "192.168.124.10",
        auto_config: false,
        libvirt__dhcp_enabled: false
    end

    admin.vm.network :forwarded_port,
      guest_ip: "192.168.124.10", guest: 3000, host: 3000
    # admin.ssh.forward_agent = true

    admin.vm.synced_folder ".", "/vagrant", disabled: true
    admin.vm.synced_folder "/data/install/isos", "/isos"
    #admin.vm.synced_folder "/mnt/suse-cloud-4", "/srv/tftpboot/repos/Cloud", type: "nfs"

    files_to_provision = [
      "cloud-admin/network.json",
      # Normally Crowbar seizes control of *all* interfaces.  But in the Vagrant
      # case we don't want it to touch eth0, so we need this evil patch:
      "cloud-admin/barclamp-network-ignore-eth0.patch",

      # Provide NFS export to share /var/lib/glance
      "cloud-admin/barclamp-provisioner-nfs-export.patch",

      # another evil hack to avoid a crasher when applying the keystone
      # barclamp
      "cloud-admin/barclamp-pacemaker-ignore-target-role-changes.patch",
    ]
    provision_to_tmp(admin, files_to_provision)
    admin.vm.provision "shell", path: "prep-admin.sh"

    # Set up DEPS and Cloud repositories
    admin.vm.provision "shell", path: "prep-admin-inject-isos.sh"

    # Automatically install SUSE Cloud on first-boot
    admin.vm.provision "shell", path: "install-suse-cloud.sh"
  end

  2.times do |i|
    node_name = "controller#{i+1}"
    config.vm.define node_name do |node|
      node.vm.box = 'suse/sles11-sp3'
      node.vm.box_check_update = false

      node.vm.provider 'virtualbox' do |provider|
        provider.memory = 2048
        provider.cpus = 1

        # Don't use headless mode
        provider.gui = true

        # Use AMD instead of Intel NICs to avoid VLAN problems
        provider.customize [ 'modifyvm', :id, '--nictype1', 'Am79C973' ]
        provider.customize [ 'modifyvm', :id, '--nictype2', 'Am79C973' ]

        ## create disk for DRBD
        provider.customize [ 'createhd', '--filename', "drbd-#{node_name}.vmdk", '--size', 2100, '--format', 'VMDK' ]
        provider.customize [
          'storageattach', :id,
          '--storagectl', 'SCSI',
          '--port', 1,
          '--device', 0,
          '--type', 'hdd',
          '--medium', "drbd-#{node_name}.vmdk",
        ]
        # create shared disk for SBD
        provider.customize [ 'createhd', '--filename', 'sbd.vmdk', '--size', 8, '--format', 'VMDK', '--variant', 'Fixed' ]
        provider.customize [ 'modifyhd', 'sbd.vmdk', '--type', 'shareable' ]
        provider.customize [
          'storageattach', :id,
          '--storagectl', 'SCSI',
          '--port', 2,
          '--device', 0,
          '--type', 'hdd',
          '--medium', 'sbd.vmdk',
        ]
      end

      node.vm.provider 'libvirt' do |provider|
        provider.volume_cache = 'none'

        # Don't use headless mode
        provider.gui = true
      end

      # Allow Hawk web UI to be accessed by a presentation laptop.
      node.vm.network :forwarded_port, guest: 7630, host: 7630+i-1

      node.vm.synced_folder ".", "/vagrant", disabled: true

      node.vm.network "private_network", ip: "192.168.124.#{80+i}", auto_config: false

      files_to_provision = [
        # https://bugzilla.novell.com/show_bug.cgi?id=877484
        "cloud-admin/crmsh-report-bnc877484.patch",
      ]
      provision_to_tmp(node, files_to_provision)

      node.vm.provision "shell", inline: <<-EOSCRIPT
        set -e

        export PATH="$PATH:/sbin:/usr/sbin/"
        zypper ar http://192.168.124.10:8091/suse-11.3/install sles11-sp3
        until [ -f crowbar_register ]; do
          wget http://192.168.124.10:8091/suse-11.3/crowbar_register
        done
        chmod a+x crowbar_register
        ./crowbar_register --force --interface eth1 --gpg-auto-import-keys --no-gpg-checks

        zypper -n in crmsh # can't patch crmsh until it's installed
        patch -d /usr/lib64/python2.6/site-packages/crmsh -p2 \
            < /tmp/crmsh-report-bnc877484.patch

        # Set up SBD disk
        zypper -n in sbd
        sbd -d /dev/sdc create

        # Mount NFS export for glance
        echo "192.168.124.10:/var/lib/glance /var/lib/glance nfs defaults 0 2" >> /etc/fstab
        mkdir -p /var/lib/glance
        mount /var/lib/glance
      EOSCRIPT
    end
  end

  1.times do |i|
    node_name = "compute#{i+1}"
    config.vm.define node_name do |node|
      node.vm.box = 'suse/sles11-sp3'
      node.vm.box_check_update = false

      node.vm.provider 'virtualbox' do |provider|
        provider.memory = 2048
        provider.cpus = 1

        # Don't use headless mode
        provider.gui = true
      end

      node.vm.provider 'libvirt' do |provider|
        provider.nested = true
        provider.volume_cache = 'none'

        # Don't use headless mode
        provider.gui = true

        # Use AMD instead of Intel NICs to avoid VLAN problems
        provider.customize [ 'modifyvm', :id, '--nictype1', 'Am79C973' ]
        provider.customize [ 'modifyvm', :id, '--nictype2', 'Am79C973' ]
      end

      node.vm.synced_folder ".", "/vagrant", disabled: true

      node.vm.network "private_network", ip: "192.168.124.83", auto_config: false

      node.vm.provision "shell", inline: <<-EOSCRIPT
        set -e

        export PATH="$PATH:/sbin:/usr/sbin/"
        zypper ar http://192.168.124.10:8091/suse-11.3/install sles11-sp3
        until [ -f crowbar_register ]; do
          wget http://192.168.124.10:8091/suse-11.3/crowbar_register
        done
        chmod a+x crowbar_register
        ./crowbar_register --force --interface eth1  --gpg-auto-import-keys
      EOSCRIPT
    end
  end
end
